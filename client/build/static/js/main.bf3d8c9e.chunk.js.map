{"version":3,"sources":["svg/icon.png","components/Question.js","api/quizQuestions.js","components/QuestionCount.js","components/AnswerOptions.js","components/DropdownList.js","components/TextfieldList.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","props","className","content","quizQuestions","initQuestions","sectionTitle","question","videoUrl","breakPoint","uiType","answers","type","follower","secondQuestion","finalList","QuestionCount","counter","total","AnswerOption","DropdownList","handleClick","event","setState","dropDownValue","target","value","state","key","MenuItem","FormControl","margin","InputLabel","id","Select","labelId","this","onChange","style","backgroundColor","answerOptions","map","renderMenuItems","FormHelperText","Button","variant","color","onClick","onAnswerSelected","React","Component","TextfieldList","result","handleTextOnChange","index","currentTarget","console","log","renderTextfields","TextField","label","Quiz","isVisible","questionId","questionTotal","questionid","rewindFromComponent","Result","renderAnswerListItem","answer_obj","quizResult","history","Array","isArray","answer","anser_str","App","answersCount","Nintendo","Microsoft","Sony","showQuiz","handleAnswerSelected","bind","handleVideoTimeUpdate","currentQuestion","load_qList","currentTime","String","load_question","push","updateAnswersCount","update","$apply","currentValue","setUserAnswer","length","setTimeout","setNextQuestion","setResults","getResults","x","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","Math","max","apply","filter","src","ref","player","playsInline","onTimeUpdate","autoPlay","muted","poster","renderResult","renderQuiz","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf3d8c9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.6f8bf802.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n \n \nfunction Question(props) {\n\treturn (\n\t\t<h2 className=\"question\">{props.content}</h2>\n\t\t);\n}\n\n\nQuestion.propTypes = {\n\tcontent: PropTypes.string.isRequired\n};\n \nexport default Question;","var quizQuestions = { \n    initQuestions: [\n      {\n        sectionTitle: \"This is the title of this section, should be skipped during quiz!\" \n      },\n      {\n        question: \"How much you drink on average per day?\",\n        //videoUrl:'https://www.youtube.com/watch?v=3-iCDOYkfms',\n        videoUrl:'https://github.com/changdiqing/Quiz-For-Hospital/blob/master/media/intro.mp4?raw=true',\n        breakPoint: 3,\n        uiType:'textfield',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"ca. 1.5-2 Liter\",\n                content: \"ca. 1.5-2 Liter\"\n            },\n            {\n                type: \"ca. 2-3 Liter\",\n                content: \"ca. 2-3 Liter\"\n            }\n        ]\n      },\n      {\n        question: \"Which console would you prefer to play with friends?\",\n        videoUrl: 'https://github.com/changdiqing/Quiz-For-Hospital/blob/master/media/intro.mp4?raw=true',\n        breakPoint: 25,\n        uiType:'dropdown',\n        answers: [\n            {\n                type: \"Microsoft\",\n                content: \"X-Box\",\n                follower: \"finalList\"\n            },\n            {\n                type: \"Nintendo\",\n                content: \"Nintendo 64\",\n                follower: \"secondQuestion\"\n            },\n            {\n                type: \"Sony\",\n                content: \"Playstation 1\",\n                follower: \"secondQuestion\"\n            }\n        ]\n      }\n    ],\n\n    secondQuestion:[\n      {\n        question: \"How much you drink on average every day?\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n        breakPoint: 3,\n        uiType:'button',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"1.5-2 Liter\",\n                content: \"1.5-2 Liter\"\n            },\n            {\n                type: \"2-3 Liter\",\n                content: \"2-3 Liter\"\n            }\n        ]\n      }\n    ],\n\n    finalList:[\n      {\n        question: \"How much you drink on average every day?\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n        breakPoint: 3,\n        uiType:'dropdown',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"1.5-2 Liter\",\n                content: \"1.5-2 Liter\"\n            },\n            {\n                type: \"2-3 Liter\",\n                content: \"2-3 Liter\"\n            }\n        ]\n      },\n      {\n        question: \"How much you drink on average every day?\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n        breakPoint: 3,\n        uiType:'dropdown',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"1.5-2 Liter\",\n                content: \"1.5-2 Liter\"\n            },\n            {\n                type: \"2-3 Liter\",\n                content: \"2-3 Liter\"\n            }\n        ]\n      }\n    ]\n};\n\n\nexport default quizQuestions;","import React from 'react';\nimport PropTypes from 'prop-types';\n \nfunction QuestionCount(props) {\n\treturn (\n\t\t<div className=\"questionCount\">\n\t\t\tQuestion<span>{props.counter}</span> of <span>{props.total}</span>\n\t\t</div>\n \n\t);\n}\n \nQuestionCount.propTypes = {\n\tcounter: PropTypes.number.isRequired,\n\ttotal: PropTypes.number.isRequired\n};\n \nexport default QuestionCount;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nfunction AnswerOption(props) {\n\treturn (\n\t\t<li className=\"answerOption\">\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tclassName=\"radioCustomButton\"\n\t\t\t\tname=\"radioGroup\"\n\t\t\t\tchecked={props.answerType === props.answer}\n\t\t\t\tid={props.answerType}\n\t\t\t\tvalue={props.answerType}\n\t\t\t\tdisabled={props.answer}\n\t\t\t\tonChange={props.onAnswerSelected}\n\t\t\t/>\n\t\t\t\n \t\t\t<div className = \"answer-background\"></div>\n\t\t\t<label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n\t\t\t\t{props.answerContent}\n\t\t\t</label>\n\t\t\t\n\t\t</li>\n\t);\n}\n \nAnswerOption.propTypes = {\n\tanswerType: PropTypes.string.isRequired,\n\tanswerContent: PropTypes.string.isRequired,\n\tanswer: PropTypes.string.isRequired,\n\tOnAnswerSelected: PropTypes.string.isRequired,\n \n};\n \nexport default AnswerOption;","import PropTypes from 'prop-types';\nimport React from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\n//import Button from 'react-bootstrap/Button';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nclass DropdownList extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      dropDownValue: 0//\"Select an item\",\n    };\n  };\n\n  handleClick = event => {\n    this.setState({ dropDownValue: event.target.value});\n  };\n \n  renderMenuItems(key){\n    return(\n      <MenuItem value={key.type}>{key.content}</MenuItem>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"DropdownList\">\n          <FormControl margin='normal'>\n          <InputLabel id=\"demo-simple-select-label\"></InputLabel>\n          <Select labelId=\"demo-simple-select-label\" value={this.state.dropDownValue} onChange={this.handleClick} style={{backgroundColor:\"white\"}}>\n            <MenuItem value={0}>\n            <em>Select an option</em>\n          </MenuItem>\n            {this.props.answerOptions.map(this.renderMenuItems)}\n          </Select>\n          <FormHelperText></FormHelperText>\n          <Button  value={this.state.dropDownValue} variant=\"contained\" color=\"primary\" onClick={this.props.onAnswerSelected}>Next Question</Button>\n          </FormControl>\n      </div>\n    );\n  }\n}\n\n//export default withStyles(dropdownStyle)(DropdownList);\nexport default DropdownList;","import PropTypes from 'prop-types';\nimport update from 'react-addons-update';\nimport React from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\n//import Button from 'react-bootstrap/Button';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nclass TextfieldList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.result= this.props.answerOptions;\n  };\n\n  handleClick = event => {\n    this.props.onAnswerSelected(this.result);\n  };\n\n  handleTextOnChange = (event,index) => {\n    //console.log(event.currentTarget);\n    //console.log(event);\n\n    this.result[index]['content'] = event.currentTarget.value;\n    \n    console.log(this.result);\n\n  };\n\n  renderTextfields = (key, index) =>{\n    return(\n      <TextField key = {key.type}  onChange={(event)=>this.handleTextOnChange(event,index)} label={key.type}/>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"DropdownList\">\n          <FormControl margin='normal'>\n          <InputLabel id=\"demo-simple-select-label\"></InputLabel>\n            {this.props.answerOptions.map(this.renderTextfields)}\n          <FormHelperText></FormHelperText>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>Next Question</Button> \n          </FormControl>\n      </div>\n    );\n  }\n}\n\n//export default withStyles(dropdownStyle)(DropdownList); onClick={this.props.onAnswerSelected}\nexport default TextfieldList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport FormControl from '@material-ui/core/FormControl';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOptions';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport DropdownList from '../components/DropdownList';\nimport TextfieldList from '../components/TextfieldList'\n \n \nfunction Quiz(props) {\n\tfunction renderAnswerOptions(key) {\n\t\treturn (\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"contained\" color=\"primary\"\n\t\t\t\t\tkey={key.content}\n\t\t\t\t\tvalue={key.content}\n\t\t\t\t\tquestionid={props.questionId}\n\t\t\t\t\tonClick={props.onAnswerSelected}\n\t\t\t\t\tstyle={{margin:\"10px\"}}\n\t\t\t\t\t>\n\t\t\t\t\t{key.content}</Button>\n\t\t);\n\t}\n\n\tfunction renderAnswerDropdowns(answerOptions){\n\t\treturn (\n\t\t\t<DropdownList answerOptions = {answerOptions} onAnswerSelected={props.onAnswerSelected}>\n\t\t\t</DropdownList>\n\t\t\t);\n\t}\n\n\tfunction renderTextfields(answerOptions){\n\t\treturn (\n\t\t\t<TextfieldList answerOptions = {answerOptions} onAnswerSelected={props.rewindFromComponent}>\n\t\t\t</TextfieldList>\n\t\t\t);\n\t}\n\n\n \n \t/*\n\treturn (\n\t\t<ReactCSSTransitionGroup\n\t\t\tclassName=\"container\"\n\t\t\tcomponent=\"div\"\n\t\t\ttransitionName=\"fade\"\n\t\t\ttransitionEnterTimoeout={800}\n\t\t\ttransitionLeaveTimeout={500}\n\t\t\ttransitionAppear\n\t\t\ttransitionAppearTimeout={500}\n\t\t>\n\t\t\t<div key={props.questionId}>\n\t\t\t \t<QuestionCount\n\t\t\t \t\tcounter={props.questionId}\n\t\t\t \t\ttotal={props.questionTotal}\n\t\t\t  \t/>\n\t\t\t  \t<Question content={props.question} />\n\t\t\t  \t<ul className=\"answerOptions\">\n\t\t\t  \t\t{props.answerOptions.map(renderAnswerOptions)}\n\t\t\t  \t</ul>\n\t\t\t </div>\n\t\t</ReactCSSTransitionGroup>\n \t\t<div class = \"quiz-background\"></div>\n\t);\n \t*/\n \n\treturn(\n\t\t<div className={props.isVisible ? 'quiz':'hidden'} >\n\t\t\t<div className=\"quiz-background\"></div>\n\t\t\t<QuestionCount\n\t\t\t\tcounter={props.questionId}\n\t\t\t\ttotal={props.questionTotal}\n\t\t\t/>\n\t\t\t<Question content={props.question} />\n\t\t\t<FormControl margin='normal'>\n\t\t\t{props.uiType == 'button' ? props.answerOptions.map(renderAnswerOptions) :\n\t\t\t\tprops.uiType == 'dropdown'? renderAnswerDropdowns(props.answerOptions) :\n\t\t\t\t\trenderTextfields(props.answerOptions)}\n\t\t\t</FormControl>\n\t\t</div>\n\t);\n}\n \nQuiz.propTypes = {\n\t//answer: PropTypes.string.isRequired,\n\tanswerOptions: PropTypes.array.isRequired,\n\tquestion: PropTypes.string.isRequired,\n\tquestionId: PropTypes.number.isRequired,\n\tquestionTotal: PropTypes.number.isRequired,\n\tonAnswerSelected: PropTypes.func.isRequired,\n\tisVisible: PropTypes.bool.isRequired,\n\tuiType: PropTypes.string.isRequired,\n};\n \nexport default Quiz;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n \nfunction Result(props) {\n\tconsole.log(props);\n\n\n\tfunction renderAnswer(anser_str){\n\t\treturn(\n\t\t\t<p> {anser_str}</p>\n\t\t);\n\t}\n\n\tfunction renderAnswerListItem(answer_obj){\n\t\treturn(\n\t\t\t<p> {answer_obj.type}  {answer_obj.content}</p>\n\t\t);\n\t}\n\n\tfunction renderHistory(key) {\n\t\treturn (\n\t\t\t<li key={key.question}>\n\t\t\t\t<p>{key.question}</p>\n\t\t\t\t{Array.isArray(key.answer)?key.answer.map(renderAnswerListItem):renderAnswer(key.answer)}\n\t\t\t</li>\n\t\t);\n\t}\n\treturn (\n\t\t\n\t\t/*\n\t\t<!--ReactCSSTransitionGroup\n\t\t\tclassName=\"container result\"\n\t\t\tcomponent =\"div\"\n\t\t\ttransitionName=\"fade\"\n\t\t\ttransitionEnterTimeout={800}\n\t\t\ttransitionLeaveTimeout={500}\n\t\t\ttransitionAppear\n\t\t\ttransitionAppearTimeout={500}-->\n\n\t\t\n\t\t<!--/ReactCSSTransitionGroup-->\n\n\t\tYou prefer <strong>{props.quizResult}</strong>!\n\t\t*/\n\t\t\n\t\t<div className = \"result\">\n\t\t\t<div className = \"quiz-background\"></div>\n\t\t\t<div className = \"resultContent\">\n\t\t\tYou prefer <strong>{props.quizResult}</strong>!\n\t\t\t\t\n\t\t\t{props.history.map(renderHistory)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n \nResult.propTypes = {\n\tquizResult: PropTypes.string.isRequired,\n\thistory: PropTypes.array.isRequired\n};\n \nexport default Result;\t","import React from 'react';\nimport update from 'react-addons-update'\nimport logo from './svg/icon.png';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../node_modules/video-react/dist/video-react.css\"; \nimport Question from './components/Question';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport ReactPlayer from 'react-player';\nimport { Player } from 'video-react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     counter: 0,\n     questionId: 1,\n     question: '',\n     answerOptions: [],\n     answer: '',\n     uiType: '',\n     answersCount: {\n       Nintendo: 0,\n       Microsoft: 0,\n       Sony: 0\n     },\n     breakPoint: 0,\n     result: '',\n     showQuiz: false,\n     videoUrl: ''\n    };\n    this.history = new Array();\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    this.rewindFromComponent = this.rewindFromComponent.bind(this);\n    this.handleVideoTimeUpdate = this.handleVideoTimeUpdate.bind(this);\n    this.currentQuestion = new Array();\n\n  }\n\n  componentWillMount(){\n    //const this.currentQuestion = quizQuestions.map((question)=>this.shuffledArray(question.answers));\n\n    this.load_qList('initQuestions');\n  }\n\n  //componentDidUpdate(){\n    //console.log(this.player.subscribeToStateChang);\n    //this.player.subscribeToStateChange(this.handleStateChange.bind(this));\n  //}\n\n\n  handleVideoTimeUpdate(event){\n\n    var breakPoint = this.state.breakPoint;\n\n    if(event.currentTarget.currentTime >= breakPoint){\n      this.setState({showQuiz: true});\n    } else {\n      this.setState({showQuiz: false});\n    }\n  }\n\n  // load content of next question, skip if the question object is a title\n  load_question(counter, questionId){\n    // skip if is title\n    while('sectionTitle' in this.currentQuestion[counter]){\n      // this is a section title, not a question! shift counter and questionID by 1\n      questionId +=1;\n      counter +=1;\n    }\n\n    this.setState(\n      {\n        questionId: questionId,\n        counter: counter,\n        answer: '',\n        question: this.currentQuestion[counter].question,\n        answerOptions: this.currentQuestion[counter].answers,\n        videoUrl: this.currentQuestion[counter].videoUrl,\n        uiType: this.currentQuestion[counter].uiType,\n        breakPoint: this.currentQuestion[counter].breakPoint,\n      }\n    );\n\n  }\n\n  // load question list from dictionary quizQuestions\n  load_qList(String){\n    //load question from dict by name\n    this.currentQuestion = quizQuestions[String];\n    \n    this.load_question(0,1);\n  }\n\n  setUserAnswer(answer){\n    /*console.log(this.state.answersCount);\n    console.log(answer);*/\n\n    this.history.push({\n      question: this.currentQuestion[this.state.counter].question,\n      answer: answer\n    });\n\n    console.log('So the history is');\n    console.log(this.history);\n\n    const updateAnswersCount = update(\n\n      this.state.answersCount,\n      {[answer]: {$apply: (currentValue)=> currentValue + 1}}\n      );\n\n    console.log(updateAnswersCount);\n    this.setState({\n        answersCount: updateAnswersCount,\n        answer: answer\n      });\n  }\n\n  setNextQuestion(){\n    const counter = this.state.counter +1;\n    const questionId = this.state.questionId +1;\n\n    this.load_question(counter,questionId);\n  }\n\n  rewindFromComponent(result) {\n\n    this.setUserAnswer(result);\n    \n    if(\"follower\" in this.currentQuestion[this.state.counter].answers[1]){\n      this.load_qList('secondQuestion');\n\n    }else if (this.state.questionId < this.currentQuestion.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n        /* a lot of  ()=> used for embedded functions. function will be called\n        after 300ms. This delay is simply a UX decision made so that the user\n        has a moment to see the visual feedback indicating that their selection\n        has been made.*/\n    } else {\n        setTimeout(()=>this.setResults(this.getResults()), 300);\n\n    }\n  }\n\n  handleAnswerSelected(event) {\n\n    this.setUserAnswer(event.currentTarget.value);\n    \n    if(\"follower\" in this.currentQuestion[this.state.counter].answers[1]){\n      this.load_qList('secondQuestion');\n\n    }else if (this.state.questionId < this.currentQuestion.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n        /* a lot of  ()=> used for embedded functions. function will be called\n        after 300ms. This delay is simply a UX decision made so that the user\n        has a moment to see the visual feedback indicating that their selection\n        has been made.*/\n    } else {\n        setTimeout(()=>this.setResults('undetermined', 300));\n\n    }\n  }\n\n\n  obsolete_getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);  /*Object.keys returns array of string*/\n    const answersCountValues = answersCountKeys.map((key)=>answersCount[key]);  /* return array of values */\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);  /* returns max of the array of values */\n    answersCountKeys.filter((key)=> answersCount[key]===maxAnswerCount);\n\n    var x;\n    for(x in answersCount){\n      console.log(answersCount[x]);\n    }\n\n    return answersCountKeys.filter((key)=> answersCount[key]===maxAnswerCount);\n    /* return the element 'key' that fits the filtering requirement */\n  }\n\n  setResults(result){\n\n    this.setState({\n        result: 'Undetermined'\n      });\n\n    /*\n    if(result.length === 1){\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n    */\n  }\n\n  renderQuiz(){\n    \n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={this.currentQuestion.length}\n        onAnswerSelected={this.handleAnswerSelected}\n        rewindFromComponent={this.rewindFromComponent}\n        isVisible={this.state.showQuiz}\n        uiType={this.state.uiType}\n        />\n      )\n  }\n\n  renderResult(){\n    return(\n      <Result quizResult={this.state.result} history={this.history}/>\n      )\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        \n        <div className = \"App-body\">\n            <script type=\"text/javascript\" src=\"/Riy1/viewer.js?w=600&780\"></script>\n          \n          \n          <div className = \"quiz-player-wrapper\">\n            <Player\n              ref={player => {\n                this.player = player;\n              }}\n              \n              className='quiz-player'\n              playsInline\n              onTimeUpdate={this.handleVideoTimeUpdate}\n              autoPlay\n              muted\n              poster=\"/assets/poster.png\"\n              src={this.state.videoUrl}\n            />\n            <div className = \"quiz-wrapper\">\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n            </div>          \n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n//<iframe src=\"https://drive.google.com/file/d/1Ar2wEe23l4lwShmXeoPbCL4yt60eu8nk/preview\" width=\"640\" height=\"480\"></iframe>\n/*\n\n<Question content=\"What is your favourite Entertainment Company?\" />\n\n<div className = \"sidenav\">\n\n          <header className=\"App-header\">\n            <img style={{\"height\" : \"auto\", \"width\" : \"50%\"}} src={logo} className=\"App-logo\" alt=\"logo\" /> \n            <h2 style={{zIndex: 90}} >React Quiz</h2>     \n          </header>\n        </div>\n\n<div className = \"quiz-player-wrapper\">\n            <ReactPlayer\n                className='react-player'\n                url= {this.state.videoUrl}\n                width='100%'\n                height='100%'\n                playing={true}\n                onEnded={() => this.setState({showQuiz: true})}\n              />\n            <div className = \"quiz-wrapper\">\n              {this.state.result ? this.renderResult() : this.renderQuiz()}\n            </div>\n          </div>\n*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}