{"version":3,"sources":["svg/icon.png","components/Question.js","api/quizQuestions.js","components/QuestionCount.js","components/DropdownList.js","components/TextfieldList.js","components/ButtonList.js","components/Quiz.js","components/Result.js","components/FileSelection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","questionStyle","margin","Question","props","className","style","content","quizQuestions","initQuestions","sectionTitle","question","id","videoUrl","breakPoint","uiType","answers","type","follower","secondQuestion","finalList","QuestionCount","DropdownList","handleChange","event","setState","dropDownValue","target","value","console","log","result","answerOptions","handleClick","onAnswerSelected","renderMenuItems","key","index","MenuItem","state","FormControl","InputLabel","Select","labelId","this","onChange","backgroundColor","map","FormHelperText","Button","variant","color","onClick","React","Component","TextfieldList","handleTextOnChange","currentTarget","renderTextfields","TextField","label","buttonStyle","ButtonList","renderButtons","Quiz","isVisible","rewindFromComponent","renderAnswerDropdowns","Result","renderAnswerListItem","answer_obj","history","answer","fileSelectionStyle","position","top","left","width","App","fetchPatientList","a","async","fetch","response","json","body","status","Error","message","plist","patient","fetchDataByID","method","headers","JSON","stringify","patient_data","savePatientData","data","text","responseToPost","removeDataByID","counter","questionId","answersCount","Nintendo","Microsoft","Sony","showQuiz","post","Array","bind","handleVideoTimeUpdate","currentQuestion","name","personalId","quizAnswers","load_qList","currentTime","String","load_question","push","updateAnswersCount","update","$apply","currentValue","setUserAnswer","length","setTimeout","setNextQuestion","setResults","x","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","Math","max","apply","filter","quizResult","src","ref","player","playsInline","onTimeUpdate","autoPlay","muted","poster","renderResult","renderQuiz","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a832c71f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.6f8bf802.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nvar questionStyle = {\n  margin: \"0px\"\n};\n \nfunction Question(props) {\n\treturn (\n\t\t<div className=\"question\" style={questionStyle}>{props.content}</div>\n\t\t);\n}\n\n\nQuestion.propTypes = {\n\tcontent: PropTypes.string.isRequired\n};\n \nexport default Question;","var quizQuestions = { \n    initQuestions: [\n      {\n        sectionTitle: \"This is the title of this section, should be skipped during quiz!\" \n      },\n      {\n        question: \"How much you drink on average per day?\",\n        id: \"drink_amount\",\n        //videoUrl:'https://www.youtube.com/watch?v=3-iCDOYkfms',\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4',\n        breakPoint: 0,\n        uiType:'button',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"ca. 1.5-2 Liter\",\n                content: \"ca. 1.5-2 Liter\"\n            },\n            {\n                type: \"ca. 2-3 Liter\",\n                content: \"ca. 2-3 Liter\"\n            }\n        ]\n      },\n      {\n        question: \"Which console would you prefer to play with friends?\",\n        id: \"console\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4',\n        //videoUrl: 'https://github.com/changdiqing/Quiz-For-Hospital/blob/master/media/intro.mp4?raw=true',\n        breakPoint: 0,\n        uiType:'button',\n        answers: [\n            {\n                type: \"Microsoft\",\n                content: \"X-Box\",\n                follower: \"secondQuestion\",\n            },\n            {\n                type: \"Nintendo\",\n                content: \"Nintendo 64\",\n                follower: \"secondQuestion\",\n            },\n            {\n                type: \"Sony\",\n                content: \"Playstation 1\",\n                follower: \"secondQuestion\",\n            }\n        ]\n      }\n    ],\n\n    secondQuestion:[\n      {\n        question: \"How much you drink on average every day?\",\n        id: \"drink_amount2\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n        breakPoint: 3,\n        uiType:'dropdown',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"1.5-2 Liter\",\n                content: \"1.5-2 Liter\"\n            },\n            {\n                type: \"2-3 Liter\",\n                content: \"2-3 Liter\"\n            }\n        ]\n      }\n    ],\n\n    finalList:[\n      {\n        question: \"How much you drink on average every day?\",\n        id: \"drink_amount2\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n        breakPoint: 3,\n        uiType:'dropdown',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"1.5-2 Liter\",\n                content: \"1.5-2 Liter\"\n            },\n            {\n                type: \"2-3 Liter\",\n                content: \"2-3 Liter\"\n            }\n        ]\n      },\n      {\n        question: \"How much you drink on average every day?\",\n        id: \"drink_amount2\",\n        videoUrl:'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n        breakPoint: 3,\n        uiType:'dropdown',\n        answers: [\n            {\n                type: \"ca. 1 Liter\",\n                content: \"ca. 1 Liter\"\n            },\n            {\n                type: \"1.5-2 Liter\",\n                content: \"1.5-2 Liter\"\n            },\n            {\n                type: \"2-3 Liter\",\n                content: \"2-3 Liter\"\n            }\n        ]\n      }\n    ]\n};\n\n\nexport default quizQuestions;","import React from 'react';\nimport PropTypes from 'prop-types';\n \nfunction QuestionCount(props) {\n\treturn (\n\t\t<div className=\"questionCount\">\n\t\t\tQuestion<span>{props.counter}</span> of <span>{props.total}</span>\n\t\t</div>\n \n\t);\n}\n \nQuestionCount.propTypes = {\n\tcounter: PropTypes.number.isRequired,\n\ttotal: PropTypes.number.isRequired\n};\n \nexport default QuestionCount;","import PropTypes from 'prop-types';\nimport React from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\n//import Button from 'react-bootstrap/Button';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nclass DropdownList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dropDownValue: -1//\"Select an item\",\n    };\n\n    // Why is result an array of one element? <- because result of other questions could be a multiselection,\n    // For the consistency of datastructure we use array also for single selection\n    this.result = [\n      {\n        type: \"empty\",\n        content: \"no answer selected\"\n      }\n    ];\n  };\n\n\n\n  handleChange = (event) => {\n    this.setState({\n      dropDownValue: event.target.value\n      });\n    console.log('############');\n    console.log(event.target.value);\n    this.result[0] = this.props.answerOptions[event.target.value];\n    console.log(this.result[0]);\n    \n  };\n\n  handleClick = (event) => {\n    console.log(this.result);\n    this.props.onAnswerSelected(this.result);\n  };\n \n  renderMenuItems= (key,index) => {\n    return(\n      <MenuItem value={index}>{key.content}</MenuItem>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"DropdownList\">\n          <FormControl margin='normal'>\n          <InputLabel id=\"demo-simple-select-label\"></InputLabel>\n          <Select labelId=\"demo-simple-select-label\" value={this.state.dropDownValue} onChange={this.handleChange} style={{backgroundColor:\"white\"}}>\n            <MenuItem value={-1}>\n            <em>Select an option</em>\n          </MenuItem>\n            {this.props.answerOptions.map(this.renderMenuItems)}\n          </Select>\n          <FormHelperText></FormHelperText>\n          <Button variant=\"contained\" color=\"primary\" onClick={(event)=>this.handleClick(event)}>Next Question</Button>\n          </FormControl>\n      </div>\n    );\n  }\n}\n\n\nDropdownList.propTypes = {\n  //answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n};\n\n//export default withStyles(dropdownStyle)(DropdownList);\nexport default DropdownList;","import PropTypes from 'prop-types';\nimport update from 'react-addons-update';\nimport React from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\n//import Button from 'react-bootstrap/Button';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nclass TextfieldList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.result= this.props.answerOptions;\n  };\n\n  handleClick = event => {\n    this.props.onAnswerSelected(this.result);\n  };\n\n  handleTextOnChange = (event,index) => {\n    //console.log(event.currentTarget);\n    //console.log(event);\n\n    this.result[index]['content'] = event.currentTarget.value;\n    \n    console.log(this.result);\n\n  };\n\n  renderTextfields = (key, index) =>{\n    return(\n      <TextField key = {key.type}  onChange={(event)=>this.handleTextOnChange(event,index)} label={key.type}/>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"DropdownList\">\n          <FormControl margin='normal'>\n          <InputLabel id=\"demo-simple-select-label\"></InputLabel>\n            {this.props.answerOptions.map(this.renderTextfields)}\n          <FormHelperText></FormHelperText>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>Next Question</Button> \n          </FormControl>\n      </div>\n    );\n  }\n}\n\nTextfieldList.propTypes = {\n  //answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n};\n\n//export default withStyles(dropdownStyle)(DropdownList); onClick={this.props.onAnswerSelected}\nexport default TextfieldList;\n","import PropTypes from 'prop-types';\nimport update from 'react-addons-update';\nimport React from 'react';\n//import Button from 'react-bootstrap/Button';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\nvar buttonStyle = {\n  margin: \"10px\"\n};\n\nclass ButtonList extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.result= this.props.answerOptions;  // use this line for init of multi-selection\n\n    // Why is result an array of one element? <- because result of other questions could be a multiselection,\n    // For the consistency of datastructure we use array also for single selection\n    this.state = {\n        result :[\n          {\n            type: \"empty\",\n            content: \"no answer selected\"\n          }\n        ]\n    }\n  };\n\n  handleClick = (event,index) => {\n    this.setState(\n      {\n        result:[\n          this.props.answerOptions[index]\n        ]\n      }, () => {\n      this.props.onAnswerSelected(this.state.result);\n    });\n  };\n  \n      \n    //this.result[0] = this.props.answerOptions[index];// assign the selected answer option to the first and only element of this.result\n    \n\n  renderButtons = (key, index) =>{\n    return(\n      <Button key = {key.type}  variant=\"contained\" color=\"primary\" style={buttonStyle} onClick={(event)=>this.handleClick(event,index)}>{key.content}</Button>\n    )\n  };\n\n  render() {\n    return (\n      <div className=\"ButtonList\">\n          <FormControl margin='normal'>\n            {this.props.answerOptions.map(this.renderButtons)}\n          <FormHelperText></FormHelperText>\n          </FormControl>\n      </div>\n    );\n  }\n}\n\nButtonList.propTypes = {\n  //answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n};\n//export default withStyles(dropdownStyle)(DropdownList); onClick={this.props.onAnswerSelected}\nexport default ButtonList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport FormControl from '@material-ui/core/FormControl';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport DropdownList from '../components/DropdownList';\nimport TextfieldList from '../components/TextfieldList';\nimport ButtonList from '../components/ButtonList';\n \n \nfunction Quiz(props) {\n\n\tfunction renderAnswerButtons(answerOptions) {\n\t\treturn (\n\t\t\t<ButtonList answerOptions = {answerOptions} onAnswerSelected={props.rewindFromComponent}>\n\t\t\t</ButtonList>\n\t\t);\n\t}\n\n\tfunction renderAnswerDropdowns(answerOptions){\n\t\treturn (\n\t\t\t<DropdownList answerOptions = {answerOptions} onAnswerSelected={props.rewindFromComponent}>\n\t\t\t</DropdownList>\n\t\t);\n\t}\n\n\tfunction renderTextfields(answerOptions){\n\t\treturn (\n\t\t\t<TextfieldList answerOptions = {answerOptions} onAnswerSelected={props.rewindFromComponent}>\n\t\t\t</TextfieldList>\n\t\t);\n\t}\n\n\n \n \t/*\n\treturn (\n\t\t<ReactCSSTransitionGroup\n\t\t\tclassName=\"container\"\n\t\t\tcomponent=\"div\"\n\t\t\ttransitionName=\"fade\"\n\t\t\ttransitionEnterTimoeout={800}\n\t\t\ttransitionLeaveTimeout={500}\n\t\t\ttransitionAppear\n\t\t\ttransitionAppearTimeout={500}\n\t\t>\n\t\t\t<div key={props.questionId}>\n\t\t\t \t<QuestionCount\n\t\t\t \t\tcounter={props.questionId}\n\t\t\t \t\ttotal={props.questionTotal}\n\t\t\t  \t/>\n\t\t\t  \t<Question content={props.question} />\n\t\t\t  \t<ul className=\"answerOptions\">\n\t\t\t  \t\t{props.answerOptions.map(renderAnswerOptions)}\n\t\t\t  \t</ul>\n\t\t\t </div>\n\t\t</ReactCSSTransitionGroup>\n \t\t<div class = \"quiz-background\"></div>\n\t);\n \t*/\n \n\treturn(\n\t\t<div className={props.isVisible ? 'quiz':'hidden'} >\n\t\t\t<div className=\"quiz-background\"></div>\n\t\t\t<Question content={props.question} />\n\t\t\t<FormControl margin='normal'>\n\t\t\t{props.uiType == 'button' ? renderAnswerButtons(props.answerOptions) :\n\t\t\t\tprops.uiType == 'dropdown'? renderAnswerDropdowns(props.answerOptions) :\n\t\t\t\t\trenderTextfields(props.answerOptions)}\n\t\t\t</FormControl>\n\t\t</div>\n\t);\n}\n \nQuiz.propTypes = {\n\t//answer: PropTypes.string.isRequired,\n\tanswerOptions: PropTypes.array.isRequired,\n\tquestion: PropTypes.string.isRequired,\n\tquestionId: PropTypes.number.isRequired,\n\tquestionTotal: PropTypes.number.isRequired,\n\tisVisible: PropTypes.bool.isRequired,\n\tuiType: PropTypes.string.isRequired,\n};\n\n/*\n<!--QuestionCount\n\t\t\t\tcounter={props.questionId}\n\t\t\t\ttotal={props.questionTotal}\n\t\t\t/-->\n\n*/\n \nexport default Quiz;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n \nfunction Result(props) {\n\tconsole.log(props);\n\n\n\tfunction renderAnswer(answer_str){\n\t\treturn(\n\t\t\t<p key={answer_str}> {answer_str}</p>\n\t\t);\n\t}\n\n\tfunction renderAnswerListItem(answer_obj){\n\t\treturn(\n\t\t\t<p key={answer_obj.type}> {answer_obj.type}  {answer_obj.content}</p>\n\t\t);\n\t}\n\n\tfunction renderHistory(key) {\n\t\treturn (\n\t\t\t<ul key = {key.question}>\n\t\t\t\t<p key = {key.question}>{key.question}</p>\n\t\t\t\t{key.answer.map(renderAnswerListItem)}\n\t\t\t</ul>\n\t\t);\n\t}\n\treturn (\n\t\t\n\t\t/*\n\t\t<!--ReactCSSTransitionGroup\n\t\t\tclassName=\"container result\"\n\t\t\tcomponent =\"div\"\n\t\t\ttransitionName=\"fade\"\n\t\t\ttransitionEnterTimeout={800}\n\t\t\ttransitionLeaveTimeout={500}\n\t\t\ttransitionAppear\n\t\t\ttransitionAppearTimeout={500}-->\n\n\t\t\n\t\t<!--/ReactCSSTransitionGroup-->\n\n\t\tYou prefer <strong>{props.quizResult}</strong>!\n\t\t*/\n\t\t\n\t\t<div className = \"result\">\n\t\t\t<div className = \"quiz-background\"></div>\n\t\t\t<div className = \"resultContent\">\n\t\t\t<h2>Your quiz is finished!</h2>\n\t\t\t{props.history.map(renderHistory)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n \nResult.propTypes = {\n\tquizResult: PropTypes.string.isRequired,  // place holder for passing parameters in the future\n\thistory: PropTypes.array.isRequired\n};\n \nexport default Result;\t","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\n\nvar fileSelectionStyle = {\n\tposition: \"absolute\",\n  \ttop: \"10%\",\n  \tleft: \"40%\",\n  \twidth: \"40%\"\n};\n\nclass FileSelection extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t};\n\n\n\tcomponentDidUpdate() {\n    \t//this._input.focus();\n    \tvar URL = window.URL || window.webkitURL;\n\t\tvar displayMessage = function (message, isError) {\n\t\tvar element = document.querySelector('#message')\n\t\telement.innerHTML = message\n\t\telement.className = isError ? 'error' : 'info'\n\t\t};\n\n\t\tvar playSelectedFile = function (event) {\n\t\t    var file = event.target.files[0]\n\t\t    var type = file.type\n\t\t    var videoNode = document.querySelector('video')\n\t\t    var canPlay = videoNode.canPlayType(type)\n\t\t    if (canPlay === '') canPlay = 'no'\n\t\t    var message = 'Can play type \"' + type + '\": ' + canPlay\n\t\t    var isError = canPlay === 'no'\n\t\t    displayMessage(message, isError)\n\n\t\t    if (isError) {\n\t\t      return\n\t\t    }\n\n\t\t    console.log(file);\n\t\t    var fileURL = URL.createObjectURL(file);\n\t\t    videoNode.src = fileURL;\n\t\t    videoNode.src = \"blob:http://localhost:3000/b619046f-2354-4425-a5ab-ccb5974484fc\";\n\t\t    console.log(videoNode.src);\n\t\t};\n\n\t\tvar inputNode = document.querySelector('input');\n\t\tinputNode.addEventListener('change', playSelectedFile, false);\n\t}\n \n \n\trender(){\n\t\treturn(\n\t\t\t<div className=\"fileSelection\" style={fileSelectionStyle}>\n\t\t\t\tBLABLABLA\n\t\t\t\t<h1>HTML5 local video file player example</h1>\n\t\t\t\t<div id=\"message\"></div>\n\t\t\t\t<input ref={c => (this._input = c)} type=\"file\" accept=\"video/*\"/>\n\t\t\t\t<video controls autoplay></video>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n/*\n<!--QuestionCount\n\t\t\t\tcounter={props.questionId}\n\t\t\t\ttotal={props.questionTotal}\n\t\t\t/-->\n\n*/\n \nexport default FileSelection;","import React from 'react';\nimport update from 'react-addons-update'\nimport logo from './svg/icon.png';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../node_modules/video-react/dist/video-react.css\"; \nimport Question from './components/Question';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport ReactPlayer from 'react-player';\nimport { Player } from 'video-react';\nimport Button from '@material-ui/core/Button';\nimport FileSelection from './components/FileSelection';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     counter: 0,\n     questionId: 1,\n     question: '',\n     answerOptions: [],\n     answer: '',\n     uiType: '',\n     answersCount: {\n       Nintendo: 0,\n       Microsoft: 0,\n       Sony: 0\n     },\n     breakPoint: 0,\n     result: '',\n     showQuiz: false,\n     videoUrl: '',\n     response: 'reponse',\n     post: 'post',\n     responseToPost: '',\n    };\n\n    this.history = new Array();\n    this.rewindFromComponent = this.rewindFromComponent.bind(this);\n    this.handleVideoTimeUpdate = this.handleVideoTimeUpdate.bind(this);\n    this.currentQuestion = new Array();\n\n    // This patient_data will save the patient's answers during quiz.\n    // will be save to DB after quiz is finished, for data structure please refer\n    // var max_musterman in /server.js\n\n    this.patient_data={\n      name: \"frontend musterman\",\n      personalId: \"frontend-musterman\",\n      quizAnswers:[\n        \n        ]\n      };\n    }\n\n\n\n\n  componentWillMount(){\n    //const this.currentQuestion = quizQuestions.map((question)=>this.shuffledArray(question.answers));\n\n    this.load_qList('initQuestions');\n  }\n\n  componentDidMount(){\n    //this.callApi()\n    //  .then(res => this.setState({ response: res.express}))\n  }\n\n\n  // API Calls to node.js backend\n  fetchPatientList = async () => {\n    /*\n      fetch a list of {int: id, string: patient}\n    */\n    const response = await fetch('/api/fetch-patient-list');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n\n    //var patient_list = JSON.parse(body);\n    //console.log(patient_list);\n    var plist = body;\n    console.log(plist[0].patient);\n    \n    return plist;\n  };\n\n  fetchDataByID = async (id) => {\n    const response = await fetch('/api/fetch-data-by-id',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id: id}),\n    });\n    const body = await response.json();\n    if (response.status !== 201) throw Error(body.message);\n    var patient_data = body;\n    return patient_data;\n  };\n  \n  savePatientData = async (patient_data) => {\n    console.log(\"called!\");\n    //e.preventDefault();\n    const response = await fetch('/api/add-patient-data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ data: this.patient_data }),\n    });\n    const body = await response.text();\n    this.setState({ responseToPost: body });\n  };\n\n  removeDataByID = async (id) => {\n    const response = await fetch('/api/remove-data-by-id',{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ id: id}),\n    });\n    const body = await response.json();\n    if (response.status !== 201) throw Error(body.message);\n  };\n\n\n  //componentDidUpdate(){\n    //console.log(this.player.subscribeToStateChang);\n    //this.player.subscribeToStateChange(this.handleStateChange.bind(this));\n  //}\n\n\n  handleVideoTimeUpdate(event){\n\n    var breakPoint = this.state.breakPoint;\n\n    if(this.state.showQuiz == false && event.currentTarget.currentTime >= breakPoint){\n      this.setState({showQuiz: true});\n    }\n  }\n\n  // load content of next question, skip if the question object is a title\n  load_question(counter, questionId){\n    // skip if is title\n    while('sectionTitle' in this.currentQuestion[counter]){\n      // this is a section title, not a question! shift counter and questionID by 1\n      questionId +=1;\n      counter +=1;\n    }\n\n    this.setState(\n      {\n        questionId: questionId,\n        counter: counter,\n        answer: '',\n        question: this.currentQuestion[counter].question,\n        answerOptions: this.currentQuestion[counter].answers,\n        videoUrl: this.currentQuestion[counter].videoUrl,\n        uiType: this.currentQuestion[counter].uiType,\n        breakPoint: this.currentQuestion[counter].breakPoint,\n      }\n    );\n\n  }\n\n  // load question list from dictionary quizQuestions\n  load_qList(String){\n    //load question from dict by name\n    this.currentQuestion = quizQuestions[String];\n    \n    this.load_question(0,1);\n  }\n\n  setUserAnswer(answer){\n    /*console.log(this.state.answersCount);\n    console.log(answer);*/\n    console.log('before pusing to history');\n    console.log(this.history);\n    this.history.push({\n      question: this.currentQuestion[this.state.counter].question,\n      answer: answer\n    });\n\n    this.patient_data.quizAnswers.push({\n      question: this.currentQuestion[this.state.counter].question,\n      id: this.currentQuestion[this.state.counter].id,\n      answer: answer\n    });\n\n    const updateAnswersCount = update(\n\n      this.state.answersCount,\n      {[answer]: {$apply: (currentValue)=> currentValue + 1}}\n      );\n\n    console.log(updateAnswersCount);\n    this.setState({\n        answersCount: updateAnswersCount,\n        answer: answer\n      });\n  }\n\n  setNextQuestion(){\n    const counter = this.state.counter +1;\n    const questionId = this.state.questionId +1;\n\n    this.load_question(counter,questionId);\n  }\n\n  rewindFromComponent(result) {\n\n    console.log(\"===== so the answer is =====\");\n    console.log(result);\n    console.log(this.history);\n\n    this.setUserAnswer(result);\n    \n    if(\"follower\" in this.currentQuestion[this.state.counter].answers[1]){\n      this.load_qList('secondQuestion');\n\n    }else if (this.state.questionId < this.currentQuestion.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n        /* a lot of  ()=> used for embedded functions. function will be called\n        after 300ms. This delay is simply a UX decision made so that the user\n        has a moment to see the visual feedback indicating that their selection\n        has been made.*/\n    } else {\n        this.savePatientData(this.patient_data);\n        setTimeout(()=>this.setResults('undetermined'),300);\n\n    }\n  }\n\n\n  obsolete_getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);  /*Object.keys returns array of string*/\n    const answersCountValues = answersCountKeys.map((key)=>answersCount[key]);  /* return array of values */\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);  /* returns max of the array of values */\n    answersCountKeys.filter((key)=> answersCount[key]===maxAnswerCount);\n\n    var x;\n    for(x in answersCount){\n      console.log(answersCount[x]);\n    }\n\n    return answersCountKeys.filter((key)=> answersCount[key]===maxAnswerCount);\n    /* return the element 'key' that fits the filtering requirement */\n  }\n\n  setResults(result){\n\n    this.setState({\n        result: 'Undetermined'\n      });\n\n    /*\n    if(result.length === 1){\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n    */\n  }\n\n  renderQuiz(){\n    \n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        rewindFromComponent={this.rewindFromComponent}\n        isVisible={this.state.showQuiz}\n        uiType={this.state.uiType}\n        />\n      )\n  }\n\n  renderResult(){\n    return(\n      <Result quizResult={this.state.result} history={this.history}/>\n      )\n  }\n\n  getDBContent(){\n    console.log(\"get db content\");\n  }\n\n  getDataByID(){\n    console.log(\"get data by id\");\n  }\n\n  saveDataToDB(){\n    console.log(\"save data\");\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        \n        <div className = \"App-body\">\n            <script type=\"text/javascript\" src=\"/Riy1/viewer.js?w=600&780\"></script> \n          <div className = \"quiz-player-wrapper\">\n            <Player\n              ref={player => {\n                this.player = player;\n              }}\n              \n              className='quiz-player'\n              playsInline\n              onTimeUpdate={(event)=>this.handleVideoTimeUpdate(event)}\n              autoPlay\n              muted\n              poster=\"/assets/poster.png\"\n              src={this.state.videoUrl}\n            />\n            <div className = \"quiz-wrapper\">\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n            </div>\n           \n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n//<iframe src=\"https://drive.google.com/file/d/1Ar2wEe23l4lwShmXeoPbCL4yt60eu8nk/preview\" width=\"640\" height=\"480\"></iframe>\n/*\n\n        <div className = \"sidenav\">\n\n          <header className=\"App-header\">\n            <img style={{\"height\" : \"auto\", \"width\" : \"50%\"}} src={logo} className=\"App-logo\" alt=\"logo\" /> \n            <h2 style={{zIndex: 90}} >React Quiz</h2>\n            <Button \n            variant=\"contained\" color=\"primary\"\n            onClick={this.fetchPatientList}\n            style={{margin:\"10px\"}}\n            >list all patients</Button>\n            \n            <Button \n            variant=\"contained\" color=\"primary\"\n            onClick={()=>this.savePatientData(this.patient_data)}\n            style={{margin:\"10px\"}}\n            >save sample to DB</Button>\n\n            <Button \n            variant=\"contained\" color=\"primary\"\n            onClick={()=>this.fetchDataByID(5)}\n            style={{margin:\"10px\"}}\n            >get data by id</Button>\n\n            <Button \n            variant=\"contained\" color=\"primary\"\n            onClick={()=>this.removeDataByID(5)}\n            style={{margin:\"10px\"}}\n            >remove data by id</Button>\n\n          </header>\n\n        </div>\n\n<Question content=\"What is your favourite Entertainment Company?\" />\n\n<div className = \"sidenav\">\n\n          <header className=\"App-header\">\n            <img style={{\"height\" : \"auto\", \"width\" : \"50%\"}} src={logo} className=\"App-logo\" alt=\"logo\" /> \n            <h2 style={{zIndex: 90}} >React Quiz</h2>     \n          </header>\n        </div>\n\n<div className = \"quiz-player-wrapper\">\n            <ReactPlayer\n                className='react-player'\n                url= {this.state.videoUrl}\n                width='100%'\n                height='100%'\n                playing={true}\n                onEnded={() => this.setState({showQuiz: true})}\n              />\n            <div className = \"quiz-wrapper\">\n              {this.state.result ? this.renderResult() : this.renderQuiz()}\n            </div>\n          </div>\n*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}