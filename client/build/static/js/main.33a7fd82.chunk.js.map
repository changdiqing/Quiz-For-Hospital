{"version":3,"sources":["svg/icon.png","components/Question.js","api/quizQuestions.js","components/QuestionCount.js","components/AnswerOptions.js","components/Quiz.js","components/Result.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","props","className","content","quizQuestions","question","videoUrl","answers","type","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","class","htmlFor","answerContent","Quiz","isVisible","questionId","questionTotal","answerOptions","map","key","Result","console","log","quizResult","history","Player","App","state","answersCount","Nintendo","Microsoft","Sony","result","showQuiz","Array","handleAnswerSelected","bind","shuffledAnswerOptions","shuffledArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","push","updateAnswersCount","update","$apply","currentValue","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","x","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","style","src","logo","alt","zIndex","url","width","height","playing","onEnded","renderResult","renderQuiz","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33a7fd82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.6f8bf802.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n \n \nfunction Question(props) {\n\treturn (\n\t\t<h2 className=\"question\">{props.content}</h2>\n\t\t);\n}\n\n\nQuestion.propTypes = {\n\tcontent: PropTypes.string.isRequired\n};\n \nexport default Question;","var quizQuestions = [\n  {\n      question: \"What franchise would you rather play a game from?\",\n      videoUrl:'https://www.youtube.com/watch?v=3-iCDOYkfms',\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"Halo\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"Pokemon\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Uncharted\"\n          }\n      ]\n  },\n  {\n      question: \"Which console would you prefer to play with friends?\",\n      videoUrl: 'https://www.youtube.com/watch?v=ifSWUY1Lar4',\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"X-Box\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"Nintendo 64\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Playstation 1\"\n          }\n      ]\n  },\n  {\n      question: \"Which of these racing franchises would you prefer to play a game from?\",\n      videoUrl:'https://www.youtube.com/watch?v=3-iCDOYkfms',\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"Forza\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"Mario Kart\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Gran Turismo\"\n          }\n      ]\n  },\n  {\n      question: \"Which of these games do you think is best?\",\n      videoUrl: 'https://www.youtube.com/watch?v=ifSWUY1Lar4',\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"BioShock\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"The Legend of Zelda: Ocarina of Time\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Final Fantasy VII\"\n          }\n      ]\n  },\n  {\n      question: \"What console would you prefer to own?\",\n      videoUrl:'https://www.youtube.com/watch?v=3-iCDOYkfms',\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"X-Box One\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"Wii U\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Playstation 4\"\n          }\n      ]\n  }\n];\nexport default quizQuestions;","import React from 'react';\nimport PropTypes from 'prop-types';\n \nfunction QuestionCount(props) {\n\treturn (\n\t\t<div className=\"questionCount\">\n\t\t\tQuestion<span>{props.counter}</span> of <span>{props.total}</span>\n\t\t</div>\n \n\t);\n}\n \nQuestionCount.propTypes = {\n\tcounter: PropTypes.number.isRequired,\n\ttotal: PropTypes.number.isRequired\n};\n \nexport default QuestionCount;","import React from 'react';\nimport PropTypes from 'prop-types';\n \n \nfunction AnswerOption(props) {\n\treturn (\n\t\t<li className=\"answerOption\">\n\t\t\t<input\n\t\t\t\ttype=\"radio\"\n\t\t\t\tclassName=\"radioCustomButton\"\n\t\t\t\tname=\"radioGroup\"\n\t\t\t\tchecked={props.answerType === props.answer}\n\t\t\t\tid={props.answerType}\n\t\t\t\tvalue={props.answerType}\n\t\t\t\tdisabled={props.answer}\n\t\t\t\tonChange={props.onAnswerSelected}\n\t\t\t/>\n\t\t\t\n \t\t\t<div class = \"answer-background\"></div>\n\t\t\t<label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n\t\t\t\t{props.answerContent}\n\t\t\t</label>\n\t\t\t\n \n\t\t</li>\n\t);\n}\n \nAnswerOption.propTypes = {\n\tanswerType: PropTypes.string.isRequired,\n\tanswerContent: PropTypes.string.isRequired,\n\tanswer: PropTypes.string.isRequired,\n\tOnAnswerSelected: PropTypes.string.isRequired,\n \n};\n \nexport default AnswerOption;","import React from 'react';\nimport PropTypes from 'prop-types';\n \nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOptions';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n \n \nfunction Quiz(props) {\n \t\n\tfunction renderAnswerOptions(key) {\n\t\treturn (\n\t\t\t<AnswerOption\n\t\t\t\tkey={key.content}\n\t\t\t\tanswerContent={key.content}\n\t\t\t\tanswerType={key.type}\n\t\t\t\tanswer={props.answer}\n\t\t\t\tquestionId={props.questionId}\n\t\t\t\tonAnswerSelected={props.onAnswerSelected}\n\t\t\t/>\n \n\t\t);\n\t}\n \n \t/*\n\treturn (\n\t\t<ReactCSSTransitionGroup\n\t\t\tclassName=\"container\"\n\t\t\tcomponent=\"div\"\n\t\t\ttransitionName=\"fade\"\n\t\t\ttransitionEnterTimoeout={800}\n\t\t\ttransitionLeaveTimeout={500}\n\t\t\ttransitionAppear\n\t\t\ttransitionAppearTimeout={500}\n\t\t>\n\t\t\t<div key={props.questionId}>\n\t\t\t \t<QuestionCount\n\t\t\t \t\tcounter={props.questionId}\n\t\t\t \t\ttotal={props.questionTotal}\n\t\t\t  \t/>\n\t\t\t  \t<Question content={props.question} />\n\t\t\t  \t<ul className=\"answerOptions\">\n\t\t\t  \t\t{props.answerOptions.map(renderAnswerOptions)}\n\t\t\t  \t</ul>\n\t\t\t </div>\n \n\t\t</ReactCSSTransitionGroup>\n \n \t\t<div class = \"quiz-background\"></div>\n \n \n\t);\n \t*/\n \n\treturn(\n\t\t<div className={props.isVisible ? 'quiz':'hidden'} >\n\t\t\t<div class=\"quiz-background\"></div>\n\t\t\t<QuestionCount\n\t\t\t\tcounter={props.questionId}\n\t\t\t\ttotal={props.questionTotal}\n\t\t\t/>\n\t\t\t<Question content={props.question} />\n\t\t\t{props.answerOptions.map(renderAnswerOptions)}\n\t\t\t\n\n\t\t</div>\n\t);\n}\n \nQuiz.propTypes = {\n\tanswer: PropTypes.string.isRequired,\n\tanswerOptions: PropTypes.array.isRequired,\n\tcounter: PropTypes.number.isRequired,\n\tquestion: PropTypes.string.isRequired,\n\tquestionId: PropTypes.number.isRequired,\n\tquestionTotal: PropTypes.number.isRequired,\n\tonAnswerSelected: PropTypes.func.isRequired,\n\tisVisible: PropTypes.string.isRequired\n};\n \nexport default Quiz;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n \nfunction Result(props) {\n\tconsole.log(props);\n\tfunction renderHistory(key) {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t<h3>{key.question}</h3>\n\t\t\t<p>{key.answer}</p>\n\t\t\t</ul>\n\t\t);\n\t}\n\treturn (\n\t\t\n\t\t/*\n\t\t<!--ReactCSSTransitionGroup\n\t\t\tclassName=\"container result\"\n\t\t\tcomponent =\"div\"\n\t\t\ttransitionName=\"fade\"\n\t\t\ttransitionEnterTimeout={800}\n\t\t\ttransitionLeaveTimeout={500}\n\t\t\ttransitionAppear\n\t\t\ttransitionAppearTimeout={500}-->\n\n\t\t\n\t\t<!--/ReactCSSTransitionGroup-->\n\n\t\tYou prefer <strong>{props.quizResult}</strong>!\n\t\t*/\n\t\t\n\t\t<div >\n\t\t\t<div class = \"quiz-background\"></div>\n\t\t\t<div className=\"result\">\n\t\t\t\tYou prefer <strong>{props.quizResult}</strong>!\n\t\t\t\t{props.history.map(renderHistory)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n \nResult.propTypes = {\n\tquizResult: PropTypes.string.isRequired,\n\thistory: PropTypes.array.isRequired\n};\n \nexport default Result;\t","import React from 'react'\nimport PropTypes from 'prop-types';\nimport ReactPlayer from 'react-player'\n\nfunction Player(props) {\n\treturn (\n\t\t<ReactPlayer url='https://www.youtube.com/watch?v=6VCStEpYQPg&feature=emb_rel_err' playing/>\n\t\t);\n}\n\n/*\nPlayer.propTypes = {\n\tcontent: PropTypes.string.isRequired\n};\n*/\nexport default Player;\n\n/*\n<div class=\"react-player\" style=\"width: 100%; height: 100%;\">\n<div style=\"width: 100%; height: 100%;\">\n<iframe frameborder=\"0\" allowfullscreen=\"1\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" title=\"YouTube video player\" width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/oUFJJNQGwhk?autoplay=1&amp;mute=0&amp;controls=0&amp;origin=https%3A%2F%2Fcookpete.com&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;iv_load_policy=3&amp;modestbranding=1&amp;enablejsapi=1&amp;widgetid=1\" id=\"widget2\">\n</iframe>\n</div>\n</div>\n*/","import React from 'react';\nimport update from 'react-addons-update'\nimport logo from './svg/icon.png';\nimport './App.css';\nimport Question from './components/Question';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport Player from './components/Player';\nimport ReactPlayer from 'react-player';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     counter: 0,\n     questionId: 1,\n     question: '',\n     answerOptions: [],\n     answer: '',\n     answersCount: {\n       Nintendo: 0,\n       Microsoft: 0,\n       Sony: 0\n     },\n     result: '',\n     showQuiz: false,\n     videoUrl: ''\n    };\n    this.history = new Array();\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentWillMount(){\n    const shuffledAnswerOptions = quizQuestions.map((question)=>this.shuffledArray(question.answers));\n\n    this.setState(\n      {\n        question: quizQuestions[0].question,\n        answerOptions: shuffledAnswerOptions[0],\n        videoUrl: quizQuestions[0].videoUrl,\n      }\n    );\n  }\n\n  shuffledArray(array) {\n    var currentIndex = array.length;\n    var temporaryValue;\n    var randomIndex;\n\n    // While there remain elements to shuffle..\n\n    while(currentIndex!==0){\n      // Pick a remaining element\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -=1;\n\n      // And swap it with the current element\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  setUserAnswer(answer){\n    /*console.log(this.state.answersCount);\n    console.log(answer);*/\n    this.history.push({\n      question: quizQuestions[this.state.counter].question,\n      answer: answer\n    });\n    console.log(this.history);\n\n    const updateAnswersCount = update(\n\n      this.state.answersCount,\n      {[answer]: {$apply: (currentValue)=> currentValue + 1}}\n      );\n\n    console.log(updateAnswersCount);\n    this.setState({\n        answersCount: updateAnswersCount,\n        answer: answer\n      });\n  }\n\n  setNextQuestion(){\n    const counter = this.state.counter +1;\n    const questionId = this.state.questionId +1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      videoUrl: quizQuestions[counter].videoUrl,\n      answer: '',\n      showQuiz: false\n    });\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n    if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n        /* a lot of  ()=> used for embedded functions. function will be called\n        after 300ms. This delay is simply a UX decision made so that the user\n        has a moment to see the visual feedback indicating that their selection\n        has been made.*/\n      } else {\n        setTimeout(()=>this.setResults(this.getResults()), 300);\n\n      }\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);  /*Object.keys returns array of string*/\n    const answersCountValues = answersCountKeys.map((key)=>answersCount[key]);  /* return array of values */\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);  /* returns max of the array of values */\n    answersCountKeys.filter((key)=> answersCount[key]===maxAnswerCount);\n\n    var x;\n    for(x in answersCount){\n      console.log(answersCount[x]);\n    }\n\n    return answersCountKeys.filter((key)=> answersCount[key]===maxAnswerCount);\n    /* return the element 'key' that fits the filtering requirement */\n  }\n\n  setResults(result){\n    if(result.length === 1){\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  renderQuiz(){\n    \n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n        isVisible={this.state.showQuiz}\n        />\n      )\n  }\n\n  renderResult(){\n    return(\n      <Result quizResult={this.state.result} history={this.history}/>\n      )\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <div class = \"sidenav\">\n          <header className=\"App-header\">\n            <img style={{\"height\" : \"auto\", \"width\" : \"50%\"}} src={logo} className=\"App-logo\" alt=\"logo\" /> \n            <h2 style={{zIndex: 90}} >React uiz</h2> \n            <h2>Was geändert</h2>      \n          </header>\n        </div>\n        <div class = \"App-body\">\n          \n          <Question content=\"What is your favourite Entertainment Company?\" />\n          <div class = \"quiz-player-wrapper\">\n            \n            <ReactPlayer\n                className='react-player'\n                url= {this.state.videoUrl}\n                width='100%'\n                height='100%'\n                playing='true'\n                onEnded={() => this.setState({showQuiz: true})}\n              />\n            <div class = \"quiz-wrapper\">\n              {this.state.result ? this.renderResult() : this.renderQuiz()}\n              }\n            </div>\n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}